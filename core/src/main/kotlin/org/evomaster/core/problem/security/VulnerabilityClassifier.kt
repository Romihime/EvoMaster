package org.evomaster.core.problem.security

import com.google.inject.Inject
import org.evomaster.core.EMConfig
import org.evomaster.core.problem.rest.RestIndividual
import org.evomaster.core.problem.rest.service.SecurityRest
import org.evomaster.core.search.service.Archive
import org.slf4j.Logger
import org.slf4j.LoggerFactory

class VulnerabilityClassifier {

    companion object {
        private val log: Logger = LoggerFactory.getLogger(SecurityRest::class.java)
    }

    @Inject
    private lateinit var config: EMConfig

    /**
     * Archive including test cases
     */
    @Inject
    private lateinit var archive: Archive<RestIndividual>

    /**
     * TODO: Implement method to classify endpoints for potential
     *  vulnerability classes
     */
    fun classify() {
        when (config.vulnerabilitySelectionStrategy) {
            EMConfig.VulnerabilitySelectionStrategy.MANUAL -> {
                manualClassifier()
            }
            EMConfig.VulnerabilitySelectionStrategy.LLM -> {
                llmClassifier()
            }
        }
    }

    /**
     * TODO: Classify based on manual
     * TODO: Need to rename the word manual to something meaningful later
     */
    private fun manualClassifier() {

    }

    /**
     * TODO: Use LLM to classify the URLs
     */
    private fun llmClassifier() {

    }

}
