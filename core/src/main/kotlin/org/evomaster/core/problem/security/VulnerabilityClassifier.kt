package org.evomaster.core.problem.security

import com.google.inject.Inject
import org.evomaster.core.EMConfig
import org.evomaster.core.problem.rest.schema.RestSchema
import org.slf4j.Logger
import org.slf4j.LoggerFactory

class VulnerabilityClassifier {

    @Inject
    private lateinit var config: EMConfig

    private val parameterMapping: MutableMap<String, String> = mutableMapOf()

    companion object {
        private val log: Logger = LoggerFactory.getLogger(VulnerabilityAnalyser::class.java)
    }

    fun classify(schema: RestSchema) {
        when (config.vulnerabilitySelectionStrategy) {
            EMConfig.VulnerabilitySelectionStrategy.MANUAL -> {
                // TODO: Pending
            }

            EMConfig.VulnerabilitySelectionStrategy.LLM -> {
                llmClassifier(schema)
            }
        }
    }

    fun llmClassifier(schema: RestSchema) {
        if (!config.languageModelConnector) {
            throw IllegalStateException("Language Model Connector is disabled. Unable to run the classification.")
        }
        schema.main.schemaParsed.paths.forEach { path ->
            // TODO: Extract parameters and description to classify
            val x = path.value
        }
    }
}
