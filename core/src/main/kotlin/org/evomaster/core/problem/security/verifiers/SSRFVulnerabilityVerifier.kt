package org.evomaster.core.problem.security.verifiers

import com.github.tomakehurst.wiremock.WireMockServer
import com.github.tomakehurst.wiremock.client.WireMock
import com.github.tomakehurst.wiremock.core.WireMockConfiguration
import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer
import org.evomaster.client.java.instrumentation.shared.VulnerabilityAnalyserSharedUtils
import org.evomaster.core.problem.security.VulnerabilityVerifier
import java.util.UUID

class SSRFVulnerabilityVerifier : VulnerabilityVerifier() {

    private var wireMockServer: WireMockServer? = null

    private var traceTokens: MutableMap<String, String> = mutableMapOf()

    override fun init() {
        val config = WireMockConfiguration()
            .bindAddress(VulnerabilityAnalyserSharedUtils.SSRF_VERIFIER_WM_IP)
            .extensions(ResponseTemplateTransformer(false))
            .httpsPort(8080)

        wireMockServer = WireMockServer(config)
        wireMockServer!!.start()
        wireMockServer!!.stubFor(
            WireMock.any(WireMock.anyUrl())
                .atPriority(1)
                .willReturn(
                    WireMock.aResponse()
                        .withStatus(200)
                        .withBody("OK")
                )
        )
    }

    override fun prepare() {

    }

    fun generateLink(): String {
        val token = UUID.randomUUID().toString()
        val path = "sink/$token"

        wireMockServer!!.stubFor(
            WireMock.post(WireMock.urlPathMatching(path))
                .willReturn(
                    WireMock.aResponse()
                        .withStatus(200)
                        .withBody("OK")
                )
        )

        var link = "http://${VulnerabilityAnalyserSharedUtils.SSRF_VERIFIER_WM_IP}:${wireMockServer!!.port()}/$path"

        traceTokens[token] = link

        return link
    }

    override fun verify() {
//        wireMockServer!!.allServeEvents.any{ it -> it.request.url }
    }


    private fun resetHTTPVerifier() {
        wireMockServer?.resetAll()
        traceTokens.clear()
    }
}
